[{"model": "blogapp.post", "pk": 1, "fields": {"title": "Hello World", "subtitle": "Welcome to my website. Stay and learn a little about it.", "slug": "hello-world", "date": "2017-07-12T23:49:24.229Z", "body": "<p>\r\nThis is actually my third attempt at making a personal website. My first time trying was in \r\nmiddle school, where I integrated a chat client on a webpage and just left it at that. My second\r\nattempt was last year, where after realizing that this domain was available, I quickly mocked \r\nsomething up and hosted it on my parent's HostGator account.\r\n</p>\r\n\r\n<p>\r\nThis time around, I'm going to do things differently - no more taking shortcuts. This blog will be about\r\nhow I built up a website from scratch, and document the steps in case anyone out there is interested.\r\n</p>\r\n\r\n<p>\r\nIn addition, this blog will cover the various projects I'll be working on, whether it be related \r\nto work, exploring Tensorflow, or just general things around the house I'm doing. Motivation is\r\ndefinitely something I lack at times - hopefully this medium will help inspire me to keep learning\r\nand try new things.\r\n</p>\r\n\r\n<h2 class=\"section-heading\">About This Site, as of Today...</h2>\r\n\r\n<p>\r\nTo get started, I'd like to explain what I've already done. \r\n</p>\r\n\r\n<p>\r\nThis current layout is pretty much a generic <a href=\"https://startbootstrap.com/template-overviews/clean-blog/\">Bootstrap Blog</a> template.\r\nI'll be personalizing the website in the near future, though I'm pretty ok with the general layout of\r\nthis template and don't mind sticking with it.\r\n</p>\r\n\r\n<p>\r\nFor my backend setup, I'm using Django (the latest version - 1.11.3) with nginx. I'm using AWS Lightsail\r\nto host my blog. As an aside, in my short experience with it, AWS is a wonderful and very easy to use service.\r\nAt work, we are using Microsoft Azure, and it's a lot more difficult to use their UI and figure out how to make things work.\r\n</p>\r\n\r\n<p>\r\nOn Lightsail, I spun up an Ubuntu 16.04 instance, and using the following setup tutorials from Digital \r\nOcean, I got my site up and running. Keep in mind the OS version is critical for some of these tutorials - \r\nI wasted a day debugging issues related to differences between Ubuntu 14.04 and 16.04.\r\n</p>\r\n\r\n<p>\r\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04\">Installing Nginx on Ubuntu 16.04</a>\r\n</p>\r\n\r\n<p>\r\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04\">Setting Up Nginx Server Blocks on Ubuntu 16.04</a>\r\n</p>\r\n\r\n<p>\r\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-16-04\">Django with uWSGI and Nginx on Ubuntu 16.04</a>\r\n</p>\r\n\r\n\r\n<p>\r\nAfter that, it was merely setting up a skeletal Django project and integrating in the bootstrap html\r\ncode into the Django templates. The <a href=\"https://docs.djangoproject.com/en/1.11/intro/tutorial01/\">Django Tutorials</a>\r\nare very useful in learning how to use this framework.\r\n</p>\r\n\r\n<p>\r\nIf you like to look at code, I'm hosting the website's collateral on <a href=\"https://github.com/rickzglue/my_web\">GitHub</a>.\r\nThis is an active repo, so it should be up to date with the latest contents on this website.\r\n</p>\r\n\r\n<h2 class=\"section-heading\">Future Steps...</h2>\r\n\r\n<p>\r\nMy next steps will be to obviously update the assets on the website and get things such as the email form\r\nworking. In addition, I'm going to generate my blog posts from a database as oppose to creating new\r\nHTML pages each post, so I'll need to get the MySQL DB set up (though I may stick to sqlite for a little while).\r\n</p>\r\n\r\n<p>\r\nLong term, I want to get stuff set up on this VM such that I can migrate my parent's websites over and\r\nmaintain them. Their websites definitely need some TLC, so that will be phase 2 of this project.\r\n</p>\r\n\r\n<p>\r\nAnyways, thanks for reading this post and joining on this adventure with me :)\r\n</p>\r\n\r\n<p>\r\nRick\r\n</p>"}}, {"model": "blogapp.post", "pk": 2, "fields": {"title": "Basic Site is Now Working!", "subtitle": "Created a favicon, and got the contact page up.", "slug": "basic-site-is-now-working", "date": "2017-07-16T23:49:24.229Z", "body": "<p>\r\nI'm not very artistic, but I managed to throw together a servicable icon for my website using\r\n<a href=\"https://vectr.com\">Vectr</a>, a SVG drawing tool. Hopefully you guys can figure out what\r\nit is suppose to be. :)\r\n</p>\r\n\r\n<img class=\"img-responsive center-block\" src='/static/favicons/pluto_simple.svg' alt=\"Pluto Simple\" height=\"400\" width=\"400\">\r\n<span class=\"caption text-muted\">Woof Woof</span>\r\n\r\n<p>\r\nAfterwards, I used <a href=\"http://realfavicongenerator.net/\">this online favicon generator</a> to\r\ncreate all the icon collateral for Android, iOS, and regular web browsers. It pretty useful, as not\r\nonly does it generate the proper image sizes, but it also autogenerates the html tags and provides a \r\nquick and easy validation service as well.\r\n</p>\r\n\r\n<p>\r\nAs an sidenote, I originally set up the favicon path in the Nginx conf file. This seems to work\r\nfor IE, Edge, and Firefox, but Chrome doesn't recognize it. As such, I recommend just \r\nsetting the favicon path information in the HTML header blocks.\r\n</p>\r\n\r\n<h2 class=\"section-heading\">Setting up the Contact Form...</h2>\r\n\r\n<p>\r\nThe Bootstrap Blog template I started with had Javascript and PHP starter code for the contact\r\npage. However, since I'm already up and running with Django, and I am pretty knowledgable with Python,\r\nit really doesn't make sense for me to set up and support PHP, a language I've never used before.\r\n</p>\r\n\r\n<p>\r\nRetrofitting the code for Django wasn't too difficult. I created a new /contact_msg/ page which the \r\nexisting contact form directs its POST output to. This contact_msg page is managed by a Django view, which\r\nin the presence of a AJAX POST request, will send an email with the form's information to \r\ncontact@rickyan.com.\r\n</p>\r\n\r\n<p>\r\nI'm actually having a free Gmail account handle the contact functionality for me. In my settings.py file,\r\nyou can see the SMTP settings to direct to the Google mail servers. My account information is not\r\nincluded in the Git repo (for obvious reasons), but you can see examples of the setup\r\n<a href=\"https://stackoverflow.com/questions/15985191/how-can-i-send-e-mail-from-django-using-the-google-smtp-server\">here</a>.\r\n</p>\r\n\r\n<p>\r\nTwo things to note. First. the Gmail account you are using to handle contact messages needs its \r\nsecurity settings to be modified. You will have to \r\n<a href=\"https://support.google.com/accounts/answer/6010255\">allow less secures apps to access the account</a>,\r\nand you won't be able to turn on two-step authentications. I recommend creating a new email account \r\njust for this purpose if you choose to go this route.\r\n</p>\r\n\r\n<p>\r\nFinally, if you want to protect against Cross-Site Request Forgeries, you will have to add some more\r\ncode to set it up. Since this is just a contact form, CSRF attacks are not applicable, and I chose not\r\nto add protection on the POST command. \r\n</p>\r\n\r\n<h2 class=\"section-heading\">Next Steps...</h2>\r\n\r\n<p>\r\nNow that my website's basic functionality is pretty much all up and running, my next focus is to\r\ncodify my posts. Right now, I'm still creating a static page per post - I'm planning on creating\r\na generic post template and populating it with post context stored in a backend DB. This might be \r\nconvoluted given my limited exposure to web programming, so I'll do some research to see if there\r\nare better options.\r\n</p>"}}, {"model": "blogapp.post", "pk": 6, "fields": {"title": "SSL Certificate", "subtitle": "Enabling HTTPS on websites", "slug": "ssl-certificate", "date": "2018-09-05T02:14:11.549Z", "body": "<p>Setting up HTTPS on a website is as easy as 1-2-Free.</p>\r\n\r\n<p>There are couple of free SSL certificates websites available online. The notably most popular are Let's Encrypt and certbot.</p>\r\n\r\n<p>To setup SSL Certificate for this blog, I followed the instructions from the following link.</p>\r\n<p>\r\n<a href=\"https://certbot.eff.org/lets-encrypt/ubuntuxenial-nginx\">https://certbot.eff.org/lets-encrypt/ubuntuxenial-nginx </a>\r\n</p>"}}, {"model": "blogapp.post", "pk": 7, "fields": {"title": "Revival and Migration", "subtitle": "Website v3.0", "slug": "revival-and-migration", "date": "2019-06-18T06:54:17.638Z", "body": "\ufeff<h1 id=\"lets-try-this-again...\">Let\u2019s Try This Again\u2026</h1>\r\n<p>One year later, a new blog post. I figure I should do more than just pay AWS and Google Domains a few bucks a month just to sit on a few unused URLs. I\u2019ll use the excuse of crazy hardware deadlines and a new job to explain away my laziness, but my main problem has just been a unfocused resolve on the topics to cover.</p>\r\n<p>Unfortunately, that issue isn\u2019t going to go away anytime soon. Rather than waiting for inspiration to strike, first and foremost I should just get into a regular cadence on writing about <em>something</em>.</p>\r\n<p>Still, I have been doing backend stuff in lieu of writing posts. The Django blogapp project thats running my blog is pretty complete now (though very trivial). I\u2019ve also been maintaining my parents\u2019  <a href=\"http://www.z-field.org\">z-field.org</a> and <a href=\"http://www.z-field.com\">z-field.com</a>, though like this blog they have gotten stale. I\u2019ve also been pondering switching over to Google Cloud as opposed to AWS, because\u2026 yeah\u2026 I work for Google now\u2026</p>\r\n<h1 id=\"topics-to-explore\">Topics to Explore</h1>\r\n<p>As a start, I guess I\u2019ll try to write at least once a month. Future stuff to talk about\u2026</p>\r\n<ul>\r\n<li>What my Django blogapp does - its not just static web pages!</li>\r\n<li>Markdown - its pretty great!</li>\r\n<li>When I get to it, the trials and tribulations of transferring to GCP.</li>\r\n</ul>\r\n<p>Also,  I should get over myself and just promote this blog a little more. I\u2019m not trying to reveal anything profound or frankly useful. Rather, it\u2019s just a forcing function to write more.</p>"}}]